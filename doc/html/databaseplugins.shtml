<!--#include virtual="header.txt"-->

<h1><a name="top">SLURM Database Plugin API</a></h1>

<h2> Overview</h2>
<p> This document describes SLURM database plugins and the API that
defines them. It is intended as a resource to programmers wishing to write
their own SLURM database plugins. This is version 1 of the API.

<p>SLURM database plugins must conform to the
SLURM Plugin API with the following specifications:

<p><span class="commandline">const char
plugin_name[]="<i>full&nbsp;text&nbsp;name</i>"
<p style="margin-left:.2in">
A free-formatted ASCII text string that identifies the plugin.

<p><span class="commandline">const char
plugin_type[]="<i>major/minor</i>"</span><br>
<p style="margin-left:.2in">
The major type must be &quot;jobacct.&quot;
The minor type can be any suitable name
for the type of accounting package. We currently use
<ul>
<li><b>flatfile</b>&#151;Information written to a flat file.
<li><b>mysql</b>&#151; Store information in a mysql database.
<li><b>pgsql</b>&#151; Store information in a postgresql database.
</ul>
<p>The programmer is urged to study 
<span class="commandline">src/plugins/database/mysql</span>
for a sample implementation of a SLURM database plugin.
<p> The database plugin was written to be a generic plugin interface
to handle any future loging by different plugins or slurm proper.  As
of version 1 we handle job accounting and job completion records.
When adding a new service to the database plugin one should note each
service writes to a different database inside the database server.
<p class="footer"><a href="#top">top</a>


<h2>API Functions</h2>

The database API uses hooks in the slurmctld.

<p>All of the following functions are required. Functions which are not
implemented must be stubbed. 

<h4>Functions called by the jobacct plugin</h4>

<p class="commandline">int database_p_jobacct_init(char *location) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_init() is called to initiate a connection to the
database server and check the state of the database table to make sure
they are in sync with the table definitions in the plugin.  
Put global initialization here.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">location</span> (input) database name or log
file location.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">int database_p_jobacct_fini() 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_fini() is called at the end of the program that has
called database_p_jobacct_init this function closes the connection to
the database or logfile.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">none</span>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int database_p_jobacct_job_start(struct job_record *job_ptr) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_job_start() is called in the jobacct plugin when a
job starts, inserting information into the database about the new job.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span> (input) information about the job in 
slurmctld.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int database_p_jobacct_job_complete(struct job_record *job_ptr) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_job_complete() is called in the jobacct plugin when
a job completes, this updates info about end of a job.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span> (input) information about the job in 
slurmctld.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int database_p_jobacct_step_start(struct step_record *step_ptr) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_step_start() is called in the jobacct plugin at the
allocation of a new step in the slurmctld, this inserts info about the
beginning of a step.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">step_ptr</span> (input) information about the step in
slurmctld.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int database_p_jobacct_step_complete(struct step_record *step_ptr) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_step_complete() is called in the jobacct plugin at
the end of a step in the slurmctld, this updates the ending
information about a step.
<p style="margin-left:.2in"><b>Arguments</b>:<br> 
<span class="commandline">step_ptr</span> (input) information about the step in
slurmctld.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int database_p_jobacct_suspend(struct job_record *job_ptr) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_suspend() is called in the jobacct plugin when a
job is suspended or resumed in the slurmctld, this updates the
database about the suspended time of the job. 
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">job_ptr</span> (input) information about the job in 
slurmctld.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">none</span>

<p class="commandline">
void database_p_jobacct_get_jobs(List job_list, List selected_steps,
List selected_parts, void *params) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobacct_get_jobs() is called to get a list of jobs from the
database given the specific inputs. 
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">List job_list </span> (input/output) list to
be filled with jobacct_job_rec_t.<br>
<span class="commandline">List selected_steps </span>
(input) list containing type jobacct_select_step_t to query against.<br>
<span class="commandline">List selected_parts </span>
(input) list containing char *'s of names of partitions to query against.<br>
<span class="commandline">void *params </span>
(input) to be cast as sacct_parameters_t in the plugin.

<p style="margin-left:.2in">jobacct_job_rec_t, jobacct_select_step_t,
and sacct_parameters_t are
all defined in common/slurm_jobacct.h
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">none</span> 

<p class="commandline">
void database_p_jobacct_archive(List selected_parts, void *params) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_archive() used to archive old data.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">List selected_parts </span>
(input) list containing char *'s of names of partitions to query against.<br>
<span class="commandline">void *params </span>
(input) to be cast as sacct_parameters_t in the plugin.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">none</span> 

<p class="footer"><a href="#top">top</a>

<h4>Functions called by the jobcomp plugin</h4>

<p class="commandline">int database_p_jobcomp_init(char *location) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_init() is called from the jobcomp plugin, 
this opens the logfile or initializes the database to be written to.  
Put global initialization here.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">location</span> (input) logfile/database name.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">int database_p_jobcomp_fini() 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_fini() is called from the jobcomp plugin, 
this closes the logfile/database.  
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">none</span>
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> on failure.

<p class="commandline">
int database_p_jobcomp_get_errno() 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_get_errno() called in the jobcomp
plugin.  Returns the number of a job completion logger specific error.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">none</span>
<p style="margin-left:.2in"><b>Returns</b>:<br>
Error number for the last failure encountered by the job completion
logging plugin.

<p class="commandline">
int database_p_jobcomp_log_record(struct job_record *job_ptr) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_log_record() called in the jobcomp plugin.
Note termation of a job with the specified characteristics.</p>
<p style="margin-left:.2in"><b>Argument</b>: <br>
<span class="commandline">job_ptr</span> (input) Pointer to job record
as defined in <i>src/slurmctld/slurmctld.h</i></p>
<p style="margin-left:.2in"><b>Returns</b>: 
<span class="commandline">SLURM_SUCCESS</span> on success, or<br>
<span class="commandline">SLURM_ERROR</span> and set the errno to an appropriate value to indicate the reason for failure.</p>

<p class="commandline">
char *database_p_jobcomp_strerror(int errnum) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_jobcomp_strerror() called in the jobcomp plugin.
Return a string description of a job completion logger specific error code.</p>
<p style="margin-left:.2in"><b>Arguments</b>:<br>
<span class="commandline"> errnum</span> (input) a job completion logger
specific error code.</p>
<p style="margin-left:.2in"><b>Returns</b>: <br>Pointer to string
describing the error or NULL if no description found in this plugin.</p>

<p class="commandline">
void database_p_jobcomp_get_jobs(List job_list, List selected_steps,
List selected_parts, void *params) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_get_jobs() is called to get a list of jobs from the
database given the specific inputs. 
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">List job_list </span> (input/output) list to
be filled with jobcomp_job_rec_t.<br>
<span class="commandline">List selected_steps </span>
(input) list containing type jobacct_select_step_t to query against.<br>
<span class="commandline">List selected_parts </span>
(input) list containing char *'s of names of partitions to query against.<br>
<span class="commandline">void *params </span>
(input) to be cast as sacct_parameters_t in the plugin.

<p style="margin-left:.2in">jobcomp_job_rec_t is defined in common/slurm_jobcomp.h
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">none</span> 

<p class="commandline">
void database_p_jobcomp_archive(List selected_parts, void *params) 
<p style="margin-left:.2in"><b>Description</b>:<br>
database_p_jobcomp_archive() used to archive old data.
<p style="margin-left:.2in"><b>Arguments</b>: <br>
<span class="commandline">List selected_parts </span>
(input) list containing char *'s of names of partitions to query against.<br>
<span class="commandline">void *params </span>
(input) to be cast as sacct_parameters_t in the plugin.
<p style="margin-left:.2in"><b>Returns</b>: <br>
<span class="commandline">none</span> 

<p class="footer"><a href="#top">top</a>

<h2>Parameters</h2>
<p>Rather than proliferate slurm.conf parameters for new or evolved
plugins, the database API counts on three parameters:
<dl>
<dt><span class="commandline">DatabaseType</span>
<dd>Specifies which plugin should be used.
<dt><span class="commandline">DatabaseHost</span>
<dd>Let the plugin know the host where the database is.
<dt><span class="commandline">DatabasePort</span>
<dd>Let the plugin know the port to connect to.
<dt><span class="commandline">DatabaseUser</span>
<dd>Let the plugin know the name of the user to connect to the
database with.
<dt><span class="commandline">DatabasePass</span>
<dd>Let the plugin know the password of the user connecting to the database.
</dl>

<h2>Versioning</h2>
<p> This document describes version 1 of the SLURM Database API. Future 
releases of SLURM may revise this API. A database plugin conveys its
ability to implement a particular API version using the mechanism outlined
for SLURM plugins.
<p class="footer"><a href="#top">top</a>

<p style="text-align:center;">Last modified 23 May 2007</p>

<!--#include virtual="footer.txt"-->
