typedef struct job_descriptor {	/* For submit, allocate, and update requests */
	char **environment;	/* environment variables to set for job, 
				 *  name=value pairs, one per line */
	uint16_t env_size;	/* element count in environment */
	char *features;		/* comma separated list of required features, 
				 * default NONE */
	uint16_t immediate;	/* 1 if allocate to run or fail immediately, 
				 * 0 if to be queued awaiting resources */
	uint32_t job_id;	/* job ID, default set by SLURM */
	char *name;		/* name of the job, default "" */
	/* job constraints: */
	uint16_t job_min_procs;    /* minimum processors per node, default=0 */
	uint16_t job_min_sockets;  /* minimum sockets per node, default=0 */
	uint16_t job_min_cores;    /* minimum cores per processor, default=0 */
	uint16_t job_min_threads;  /* minimum threads per core, default=0 */
	uint32_t job_min_memory;   /* minimum real memory per node, default=0 */
	uint32_t job_max_memory;   /* maximum real memory per node, default=0 */
	uint32_t job_min_tmp_disk; /* minimum tmp disk per node, default=0 */
	char *partition;	/* name of requested partition, 
				 * default in SLURM config */
	uint32_t priority;	/* relative priority of the job,  
				 * explicitly set only for user root, 
				 * 0 == held (don't initiate) */
	char *req_nodes;	/* comma separated list of required nodes
				 * default NONE */
	char *exc_nodes;	/* comma separated list of nodes excluded
				 * from job's allocation, default NONE */
	uint16_t shared;	/* 1 if job can share nodes with other jobs,
				 * 0 if job needs exclusive access to the node,
				 * or NO_VAL to accept the system default. */
	uint32_t time_limit;	/* maximum run time in minutes, default is
				 * partition limit */
	uint32_t num_procs;	/* total count of processors required, 
				 * default=0 */
	uint16_t min_nodes;	/* minimum number of nodes required by job, 
				 * default=0 */
	uint16_t max_nodes;	/* maximum number of nodes usable by job, 
				 * default=0 */
	uint16_t min_sockets;	/* minimum number of sockets per node required
				 * by job, default=0 */
	uint16_t max_sockets;	/* maximum number of sockets per node usable 
				 * by job, default=unlimited (NO_VAL) */
	uint16_t min_cores;	/* minimum number of cores per cpu required
				 * by job, default=0 */
	uint16_t max_cores;	/* maximum number of cores per cpu usable
				 * by job, default=unlimited (NO_VAL) */
	uint16_t min_threads;	/* minimum number of threads per core required
				 * by job, default=0 */
	uint16_t max_threads;	/* maximum number of threads per core usable
				 * by job, default=unlimited (NO_VAL) */
	uint16_t cpus_per_task;	/* number of processors required for each task */
	uint16_t ntasks_per_node;/* number of tasks to invoke on each node */
	uint16_t ntasks_per_socket;/* number of tasks to invoke on each socket */
	uint16_t ntasks_per_core;/* number of tasks to invoke on each core */
	char *script;		/* the actual job script, default NONE */
	char **argv;		/* arguments to the script */
	uint16_t argc;		/* number of arguments to the script */
	char *err;		/* pathname of stderr */
	char *in;		/* pathname of stdin */
	char *out;		/* pathname of stdout */
	uint32_t user_id;	/* set only if different from current UID, 
				 * can only be explicitly set by user root */
	uint32_t group_id;	/* group to assume, if run as root. */ 
	char *work_dir;		/* pathname of working directory */
	char *alloc_node;	/* node making resource allocation request
				 * NOTE: Normally set by slurm_submit* or 
				 * slurm_allocate* function */
	uint32_t alloc_sid;	/* local sid making resource allocation request
				 * NOTE: Normally set by slurm_submit* or 
				 * slurm_allocate* function */

	/* If the requested allocation is not immediately available,
	 * The controller sends the RESPONSE_RESOURCE_ALLOCATION message to
	 * the address designated by the alloc_hostname and alloc_port.
	 * All other messages (SRUN_PING, SRUN_TIMEOUT, etc.) are sent to
	 * the address designated by other_hostname/other_port.
	 */
	char    *alloc_resp_hostname;
	uint16_t alloc_resp_port;
	char    *other_hostname;
	uint16_t other_port;

	uint32_t dependency;	/* defer until specified job completes */
	uint16_t overcommit;	/* over subscribe resources, for batch only */
	uint32_t num_tasks;	/* number of tasks to be started, for batch only */
	uint16_t nice;		/* requested priority change, 
				 * NICE_OFFSET == no change */
	char *account;		/* charge to specified account */
	char *network;		/* network use spec */
	char *comment;		/* arbitrary comment (used by Moab scheduler) */
	time_t begin_time;	/* delay initiation until this time */
	uint16_t mail_type;	/* see MAIL_JOB_ definitions above */
	char *mail_user;	/* user to receive notification */
	uint16_t no_requeue;	/* disable job requeue option */
/*
 * The following parameters are only meaningful on a Blue Gene
 * system at present. Some will be of value on other system. Don't remove these
 * they are needed for LCRM and others that can't talk to the opaque data type
 * select_jobinfo.
 */
#if SYSTEM_DIMENSIONS
	uint16_t geometry[SYSTEM_DIMENSIONS];	/* node count in various
				 * dimensions, e.g. X, Y, and Z */
#endif
	uint16_t conn_type;	/* see enum connection_type */
	uint16_t rotate;	/* permit geometry rotation if set */
/* End of Blue Gene specific values */

	select_jobinfo_t select_jobinfo; /* opaque data type,
			* SLURM internal use only */
} job_desc_msg_t;
