#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of Blue Gene specific srun environment variables
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test8.2.input
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id          "8.2"
set exit_code        0
set file_in          "test$test_id.input"
set file_out         "test$test_id.output"
set job_id           0

print_header $test_id

if {[test_front_end] == 0} {
	send_user "\nWARNING: This test is only compatable with front-end systems\n"
	 exit $exit_code
}

#
# Set target environment variables
#
global env
set env(SLURM_CONN_TYPE)    torus
set env(SLURM_GEOMETRY)     1x1x1
set env(SLURM_NO_ROTATE)    1

#
# Delete left-over input script files
# Build input script file
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"    >$file_in
exec echo "$bin_env "     >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a job via srun using these environment variables
#
set timeout $max_job_delay
spawn $srun --batch --output=$file_out --error=/dev/null $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Confirm parameters passed into SLURM
#
set matches 0
spawn $scontrol show job $job_id
expect {
	-re "Connection=\[Tt\]" {
		incr matches
		exp_continue
	}
	-re "Rotate=\[Nn\]" {
		incr matches
		exp_continue
	}
	-re "Geometry=1x1x1" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$matches != 3} {
	send_user "\nFAILURE: Blue Gene option processing error\n"
	set exit_code 1
}

#
# Check for SLURM set environment variables
#
if {[wait_for_file $file_out] == 0} {
	set found_env 0
	spawn $bin_cat $file_out
	expect {
		-re "MPIRUN_PARTITION" {
			set found_env 1
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$found_env != 1} {
		send_user "\nFAILURE: failed to set MPIRUN_PARTITION env var\n"
		set exit_code 1
	}
} else {
	send_user "\nFAILURE: Output file missing\n"
	set exit_code 1
}

#
# Kill the job, running it is unimportant
#
exec $scancel --quiet $job_id

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out
	send_user "\nSUCCESS\n"
}
exit $exit_code

