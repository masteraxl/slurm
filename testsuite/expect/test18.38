#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of slaunch --jobid option
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Christopher J. Morrone <morrone2@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id              "18.38"
set exit_code            0
set jobid                0

print_header $test_id
set timeout $max_job_delay

#
# Run an salloc to grab a single node allocation.
#
set salloc_pid [spawn $salloc -N1 $slaunch $bin_sleep 600]
set salloc_sid $spawn_id
expect {
	-re "Granted job allocation ($number)" {
		set jobid $expect_out(1,string)
	}
	timeout {
		send_user "\nFAILURE: salloc failed to grab an allocation "
		send_user "in a timely manner.\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		exit 1
	}
}
if {$jobid == 0} {
	send_user "\nFAILURE: salloc failed to allocate resources\n"
	exit 1
}

#
# Now try to use the slaunch --jobid option to run in the already existing
# allocation.
#
set pattern "xcoetn46398vnk"
set got_pattern 0
set slaunch_pid [spawn $slaunch --jobid $jobid echo $pattern]
expect {
	-re "error" {
		send_user "\nFAILURE: unexpected error occurred\n"
		set exit_code 1
	}
	-re $pattern {
		set got_pattern 1
		exp_continue
	}
	timeout {
		exec kill $slaunch_pid
		exec kill -9 $slaunch_pid
	}
	eof {
		wait
	}
}

if {$got_pattern == 0} {
	send_user "\nFAILURE: unable to srun step under existing job allocation\n"
	set exit_code 1
}

#
# Release the allocation by killing the first srun (really it kills the "sleep")
#
exec $scancel $jobid
exec kill $salloc_pid
set spawn_id $salloc_sid
expect {
	-re "error.*already completed" {
		send_user "The \"already completed\" error is normal.\n"
		exp_continue
	}
	timeout {
		exec kill -9 $salloc_pid
	}
	eof {
		wait
	}
}

if {$got_pattern == 1} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
