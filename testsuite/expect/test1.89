#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of CPU affinity support.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2005 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "1.89"
set exit_code   0
set file_prog   "test$test_id.prog"

print_header $test_id

#
# Test if task affinity support is supported.
#
set affinity 0
log_user 0
spawn $scontrol show config
expect {
	-re "task/affinity" {
		set affinity 1
		exp_continue
	}
	eof {
		wait
	}
}
log_user 1
if {$affinity == 0} {
	send_user "\nWARNING: task affinity not supported on this system\n"
	exit 0
}

#
# Build a test program to report affinity by task
#
exec $bin_rm -f $file_prog
exec $bin_make -f /dev/null $file_prog
exec $bin_chmod 700 $file_prog

#
# Create an allocation
#
spawn $srun --allocate -N1 --verbose -t2

#
# Run a job step to get allocated processor count and affinity
#
expect -re $prompt
set mask 0
set task_cnt 0
send "$srun -c1 $file_prog\n"
expect {
	-re "TASK_ID:($number),MASK:($number)" {
		incr task_cnt
		set mask $expect_out(2,string)
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun (from --allocate) not responding\n"
		set exit_code 1
	}
	-re $prompt
}

#
# Run a job step with affinity
#
set task_mask 0
send "$srun -c1 --cpu_bind=rank $file_prog\n"
expect {
	-re "TASK_ID:($number),MASK:($number)" {
		incr task_mask $expect_out(2,string)
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun (from --allocate) not responding\n"
		set exit_code 1
	}
	-re $prompt
}
if {$task_mask != $mask} {
	send_user "\nFAILURE: affinity mask inconsistency ($task_mask,$mask)\n"
	set exit_code 1
}

#
# Run a job step with verbosity and all tasks on CPU 0
#
set task_mask 0
set verbose_cnt 0
send "$srun -c1 --cpu_bind=verbose,map_cpu:0 $file_prog\n"
expect {
	-re "TASK_ID:($number),MASK:($number)" {
		incr task_mask $expect_out(2,string)
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun (from --allocate) not responding\n"
		set exit_code 1
	}
	-re $prompt
}
if {$task_mask != $task_cnt} {
	send_user "\nFAILURE: affinity mask inconsistent ($task_mask,$task_cnt)\n"
	set exit_code 1
}
set verbose_cnt 0
send "$srun -c1 --cpu_bind=verbose,map_cpu:0 $file_prog\n"
expect {
	-re "setting affinity of task" {
		incr verbose_cnt
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun (from --allocate) not responding\n"
		set exit_code 1
	}
	-re $prompt
}
if {$verbose_cnt != $task_cnt} {
	send_user "\nFAILURE: verbose messages count inconsisent ($verbose_cnt,$task_cnt)\n"
	set exit_code 1
}

#
# Run a job step all tasks on CPU 0 by specifying mask
#
set task_mask 0
send "$srun -c1 --cpu_bind=mask_cpu:1 $file_prog\n"
expect {
	-re "TASK_ID:($number),MASK:($number)" {
		incr task_mask $expect_out(2,string)
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun (from --allocate) not responding\n"
		set exit_code 1
	}
	-re $prompt
}
if {$task_mask != $task_cnt} {
	send_user "\nFAILURE: affinity mask inconsistent ($task_mask,$task_cnt)\n"
	set exit_code 1
}

#
# Terminate the job, free the allocation
#
send "exit\n"
expect {
	-re "error" {
		send_user "\nFAILURE: some error occurred\n"
		set exit_code 1
	}
	timeout {
		send_user "\nFAILURE: srun (from --allocate) not responding\n"
		kill_srun
		set exit_code 1
	}
	eof {
		wait
	}
}
	
if {$exit_code == 0} {
	exec $bin_rm -f $file_prog
	send_user "\nSUCCESS\n"
}
exit $exit_code
