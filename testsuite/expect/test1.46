#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of srun's --kill-on-bad-exit option.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test1.46.input, test1.46.output, and test1.46.error
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "1.46"
set exit_code   0
set file_in     "test$test_id.input"
set matches     0

print_header $test_id

#
# Delete left-over input script
# Build input script file
#
# We have multiple sleep commands because if using proctrack/linuxproc, 
# the first sleep will be killed before the shell, which would 
# immediately execute the echo. 
#
exec $bin_rm -f $file_in
exec echo "#!$bin_bash"                   >$file_in
exec echo "if ((\$SLURM_PROCID== 1))"    >>$file_in
exec echo "   then exit 2"               >>$file_in
exec echo "fi"                           >>$file_in
exec echo "$bin_sleep 4"                 >>$file_in
exec echo "$bin_sleep 4"                 >>$file_in
exec echo "$bin_sleep 4"                 >>$file_in
exec echo "$bin_echo SHOULD_NOT_BE_HERE" >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a shell via srun and send exit command to task 1 only
#
set timeout $max_job_delay
spawn $srun -n10 -N1 -O --kill-on-bad-exit -t1 $file_in
expect {
	-re "exit code 2" {
		send_user "This error is expected, no worries\n"
		incr matches
		exp_continue
	}
	-re "SHOULD_NOT_BE_HERE" {
		set matches -10
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

if {$matches != 1} {
	send_user "\nFAILURE: problem with --kill-on-bad-exit option\n"
	set exit_code 1
}
if {$exit_code == 0} {
	exec $bin_rm -f $file_in
	send_user "\nSUCCESS\n"
}
exit $exit_code
