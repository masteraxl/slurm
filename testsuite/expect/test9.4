#!/usr/bin/expect
#############################################################################
# Purpose: Stress test of per-task output and input files
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    To avoid one minute NFS propogation delays in the output files, 
#          we create them ahead of time. Without explicity file creation, 
#          this test requires about one minute per cycle to execute.
#
# Note:    This script generates and then deletes files in the working directory
#          named test9.4.input, test9.4.[0-9]+.input, and test9.4.[0-9]+.output
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id       "9.4"
set cycle_count   100
set exit_code     0
set file_in       "test$test_id.input"
set file_in_task  "test$test_id.%t.input"
set file_out_task "test$test_id.%t.output"
set node_cnt      "1-4"
set other_opts    "-O"
set task_cnt      $max_stress_tasks

print_header $test_id

# Execute an srun job to print hostname to output_file with task_cnt tasks 
# per node, wait for completion
# Returns 0 on successful completion, returns 1 otherwise
proc run_cat_job { input_file output_file } {
	global bin_cat bin_rm number srun node_cnt other_opts task_cnt timeout
	spawn $srun -e - -i $input_file -o $output_file -N$node_cnt -n$task_cnt $other_opts -t1 $bin_cat -
	expect {
		-re "Unable to contact" {
			send_user "\nFAILURE: slurm appears to be down\n"
			return 1  
		}
		timeout {
			send_user "\nFAILURE: srun not responding\n"
			kill_srun
			return 1
		}
		eof {
			wait
		}
	}
	return 0
}

#
# Create a sizable text file
#
exec $bin_rm -f $file_in
exec $bin_cat /etc/hosts   >$file_in
exec $bin_cat /etc/passwd >>$file_in
set stdin_lines [get_line_cnt $file_in]

# Make a text file for each task
set timeout $max_job_delay
spawn $srun -e /dev/null -i $file_in -o $file_in_task -N$node_cnt -n$task_cnt $other_opts -t1 $bin_cat
expect {
	-re "Unable to contact" {
		send_user "\nFAILURE: slurm appears to be down\n"
		exit 1  
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Run cycle_count jobs to copy job input to job output and compare sizes
#
set success_cnt 0
set timeout $max_job_delay
for {set inx 0} {$inx < $cycle_count} {incr inx} {
#	Create empty output files (to avoid NFS delays)
	for {set tsk 0} {$tsk < $task_cnt} {incr tsk} {
		set file_out_glob "test$test_id.$tsk.output"
		exec $bin_cp /dev/null $file_out_glob
	}
	if {[run_cat_job $file_in_task $file_out_task]} {
		set exit_code 1
		continue
	}
#	Test output file sizes
	for {set tsk 0} {$tsk < $task_cnt} {incr tsk} {
		set file_out_glob "test$test_id.$tsk.output"
		wait_for_file $file_out_glob
		set stdout_lines [get_line_cnt $file_out_glob]
		if {$stdout_lines != $stdin_lines} {
			exec $bin_sleep 1
			set stdout_lines [get_line_cnt $file_out_glob]
		}
		if {$stdout_lines != $stdin_lines} {
			send_user "\nFAILURE:stdout is incomplete\n"
			set exit_code 1
		} else {
			incr success_cnt
		}
	}
}
# Destroy all input/output files
exec $bin_rm -f $file_in
for {set tsk 0} {$tsk < $task_cnt} {incr tsk} {
	set file_in_glob  "test$test_id.$tsk.input"
	set file_out_glob "test$test_id.$tsk.output"
	exec $bin_rm -f $file_in_glob $file_out_glob
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
} else {
	send_user "\nFAILURE: Only $success_cnt of "
	send_user "[expr $cycle_count * $task_cnt] task I/O tests passed\n"
}
exit $exit_code
