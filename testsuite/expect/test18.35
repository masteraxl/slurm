#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of task layout controls (--task-layout-byid,
#          --task-layout-byname and --task-layout-file options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "18.35"
set hostfile    "test$test_id.hostfile"
set exit_code   0

print_header $test_id

if { [test_xcpu] } {
	send_user "\nWARNING: This test is incompatable with XCPU systems\n"
	exit 0
}

if { [test_bluegene] } {
	send_user "\nWARNING: test incompatable with Blue Gene systems\n"
	exit $exit_code
} else {
	set node_cnt 3
}

set available [available_nodes [default_partition]]
if {$available < $node_cnt} {
	send_user "\nWARNING: not enough nodes currently available"
	send_user " ($available avail, $node_cnt needed)\n"
	exit $exit_code
}

#
# Submit a 3 node job
#
set host_0      ""
set host_1      ""
set host_2      ""
set host_3      ""
set job_id      0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -N$node_cnt -t1 $slaunch -l $bin_printenv SLURMD_NODENAME]  
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		send "$bin_echo MY_ID=\$SLURM_JOBID \n"
		exp_continue
	}
	-re "More ($alpha) requested than permitted" {
		send_user "\nWARNING: can't test salloc task distribution\n"
		exit $exit_code
	}
	-re "configuration not available" {
		exec $bin_rm -f $hostfile
		send_user "WARNING: partition too small for test\n"
		exit 0
	}
	-re "($number): ($alpha_numeric)" {
		if {$expect_out(1,string) == 0} {
			set host_0 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 1} {
			set host_1 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 2} {
			set host_2 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 3} {
			set host_3 $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		exit 1
	}
	eof {
		wait
	}
}

#
# Verify node count
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 1\n"
	set exit_code   1	
}
if {[string compare $host_2 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 2\n"
	set exit_code   1	
}
if {[string compare $host_3 ""] != 0} {
	send_user "\nFAILURE: Started more than three tasks\n"
	set exit_code   1	
}

set dup_hostname 0
if {[string compare $host_0 $host_1] == 0} {
	incr dup_hostname 	
}
if {[string compare $host_0 $host_2] == 0} {
	incr dup_hostname 1	
}
if {$dup_hostname == 1} {
	send_user "\nFAILURE: Re-used a node in the allocation\n"
	set exit_code   1	
}
set all_nodes $host_0,$host_1,$host_2
set exclude_node $host_0
set include_node $host_2

#
# Submit a job explicitly skip node 0 via --task-layout-byid
#
set invalid     0
set host_0      ""
set host_1      ""
set host_2      ""
set job_id      0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -N$node_cnt -t1 --nodelist=$all_nodes $slaunch -n2 --task-layout-byid=1,2 -l $bin_hostname]  
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "Invalid node name specified" {
		send_user "\nWARNING: Appears you are using "
		send_user "multiple slurmd testing.\n"
		send_user "This test won't work in that fashion.\n"
		set invalid 1
		exp_continue
	}
	-re "SwitchType does not permit" {
		send_user "\nNo worries, just stop the test now\n"
		set invalid 1
	}
	-re "($number): ($alpha_numeric)" {
		if {$expect_out(1,string) == 0} {
			set host_0 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 1} {
			set host_1 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 2} {
			set host_2 $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		exit 1
	}
	eof {
		wait
	}
}
if {$invalid != 0} {
	if {$exit_code == 0} {
		exec $bin_rm -f $hostfile
		send_user "\nSUCCESS\n"
	}
	exit $exit_code
}

#
# Verify node count and names
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 1\n"
	set exit_code   1	
}
if {[string compare $host_2 ""] != 0} {
	send_user "\nFAILURE: Started more than two tasks\n"
	set exit_code   1	
}
set dup_hostname 0
if {[string compare $host_0 $exclude_node] == 0} {
	set dup_hostname 1	
}
if {[string compare $host_1 $exclude_node] == 0} {
	set dup_hostname 1	
}
if {$dup_hostname == 1} {
	send_user "\nFAILURE: Allocated an excluded node\n"
	set exit_code   1	
}

#
# Submit a job step using --task-layout-byname
#
set host_0      ""
set host_1      ""
set job_id      0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -N$node_cnt --nodelist=$all_nodes -t1  $slaunch -n1 --task-layout-byname=$include_node -l $bin_printenv SLURMD_NODENAME]  
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number): ($alpha_numeric)" {
		if {$expect_out(1,string) == 0} {
			set host_0 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 1} {
			set host_1 $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Verify node count and names
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] != 0} {
	send_user "\nFAILURE: Started more than one task\n"
	set exit_code   1	
}
set dup_hostname 0
if {[string compare $host_0 $include_node] == 0} {
	set dup_hostname 1	
}
if {$dup_hostname == 0} {
	send_user "\nFAILURE: Allocation lacked an included node\n"
	set exit_code   1	
}

#
# Submit a job explicitly including a node by id
#
set file [open $hostfile "w"]
puts $file "$include_node"
close $file

set host_0      ""
set host_1      ""
set job_id      0
set timeout $max_job_delay
set salloc_pid [spawn $salloc -N$node_cnt --nodelist=$all_nodes -t1  $slaunch -n1 --task-layout-file=$hostfile -l $bin_printenv SLURMD_NODENAME]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "($number): ($alpha_numeric)" {
		if {$expect_out(1,string) == 0} {
			set host_0 $expect_out(2,string)
		}
		if {$expect_out(1,string) == 1} {
			set host_1 $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}

#
# Verify node count and names
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] != 0} {
	send_user "\nFAILURE: Started more than one task\n"
	set exit_code   1	
}
set dup_hostname 0
if {[string compare $host_0 $include_node] == 0} {
	set dup_hostname 1	
}
if {$dup_hostname == 0} {
	send_user "\nFAILURE: Allocation lacked an included node\n"
	set exit_code   1	
}

if {$exit_code == 0} {
	exec $bin_rm -f $hostfile
	send_user "\nSUCCESS\n"
}
exit $exit_code
