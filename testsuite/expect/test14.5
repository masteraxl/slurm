#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test sbcast time preservation (--preserve option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test14.5.input, test14.5.output, and test14.5.error
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "14.5"
set file_in     "test$test_id.input"
set file_out    "test$test_id.output"
set file_err    "test$test_id.error"

set exit_code            0
set job_id               0

print_header $test_id

if {[test_front_end] != 0} {
	send_user "\nWARNING: This test is incompatable with front-end systems\n"
	exit 0
}

# Delete left-over stdout/err files
file delete $file_out $file_err

#
# Build input script file that broacasts a file
#
make_bash_script $file_in "
  $srun $bin_rm /tmp/test1.$test_id
  $sbcast --preserve $sbcast /tmp/test1.$test_id
  ls -l $sbcast
  ls -l /tmp/test1.$test_id
  $srun $bin_rm -f /tmp/test1.$test_id

  $srun $bin_rm /tmp/test2.$test_id
  $sbcast $sbcast /tmp/test2.$test_id
  ls -l /tmp/test2.$test_id
  $srun $bin_rm -f /tmp/test2.$test_id
"

#
# Spawn a srun batch job that uses stdout/err and confirm their contents
#
set timeout $max_job_delay
spawn $srun -N1-1 --batch --output=$file_out --error=$file_err -t1 $file_in
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

if {$job_id == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	exit 1
}

#
# Wait for job to complete and check output file
# First two time stamps should match, last should differ
#
if {[wait_for_job $job_id "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	set exit_code 1
}

set record    0
set preserved 1
set reset     1
if {[wait_for_file $file_out] == 0} {
	spawn $bin_cat $file_out
	expect {
		-re "($number):($number)" {
			incr record
			if {$record == 1} {
				set hour   $expect_out(1,string)
				set minute $expect_out(2,string)
			}
			if {$record == 2} {
				if {$hour != $expect_out(1,string)} {
					if {$minute != $expect_out(2,string)} {
						set preserved 0
					}
				}
			}
			if {$record == 3} {
				if {$hour == $expect_out(1,string)} {
					if {$minute == $expect_out(2,string)} {
						set reset 0
					}
				}
			}
			exp_continue;
		}
		eof {
			wait
		}
	}
}

if {$record != 3} {
	send_user "\nFAILURE: Wrong record count\n"
	set exit_code 1
}
if {$preserved == 0} {
	send_user "\nFAILURE: Did not preserve file time stamp\n"
	set exit_code 1
}
if {$reset == 0} {
	send_user "\nFAILURE: Did not reset file time stamp\n"
	set exit_code 1
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_out $file_err
	send_user "\nSUCCESS\n"
}
exit $exit_code
