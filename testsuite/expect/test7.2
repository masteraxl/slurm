#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of PMI functions available via API library. Uses srun and 
#          slaunch. Tests --pmi-threads option in both commands.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2005-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id          "7.2"
set exit_code        0
set file_prog_get    "test$test_id.prog"

print_header $test_id

#
# Delete left-over program and rebuild it.
#
exec $bin_rm -f $file_prog_get
if {![test_aix]} {
	exec $bin_cc ${file_prog_get}.c -g -pthread -o $file_prog_get -I${slurm_dir}/include -Wl,--rpath=${slurm_dir}/lib -L${slurm_dir}/lib -lpmi -lslurm
} else {
	exec $bin_cc ${file_prog_get}.c -Wl,-brtl -g -pthread -o $file_prog_get -I${slurm_dir}/include -L${slurm_dir}/lib -lpmi -lslurm
}
exec $bin_chmod 700 $file_prog_get

#
# Spawn a job to test PMI functionality
#
set timeout $max_job_delay
if { [test_bluegene] } {
	set node_cnt 1-1024
} else {
	if { [test_xcpu] } {
		set node_cnt 1-1
	} else {
		set node_cnt 1-4
	}
}

# First test uses srun based task launch
# Adjust time limits as needed for large task counts */
#                   times are here  vv 
set timeout [expr $max_job_delay +  60]
set srun_pid [spawn $srun -l -N$node_cnt -n8 -O -t1 --threads=1 $file_prog_get]
expect {
	-re "FAILURE" {
		send_user "\nFAILURE: some error occured\n"
		set exit_code 1
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occured\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}

# Second test uses slaunch based task launch
# Adjust time limits as needed for large task counts */
#                   times are here  vv 
set timeout [expr $max_job_delay +  60]
set job_id 0
set salloc_pid [spawn $salloc -N$node_cnt -t1 $slaunch -n8 --overcommit -l --pmi-threads=3 $file_prog_get]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "FAILURE" {
		send_user "\nFAILURE: some error occured\n"
		set exit_code 1
		exp_continue
	}
	-re "error" {
		send_user "\nFAILURE: some error occured\n"
		set exit_code 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
        exec $bin_rm -f $file_prog_get

}
exit $exit_code
