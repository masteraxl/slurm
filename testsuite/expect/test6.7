#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test scancel signal option (--signal and --verbose options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id      "6.7"
set exit_code    0
set file_in      "test$test_id.input"
set job_id1      0
set matches      0

print_header $test_id

#
# Build input script file
#
make_bash_script $file_in "$srun $bin_sleep 10"

#
# Submit a job so we have something to work with
#
set srun_pid [spawn $srun --batch --output=/dev/null --error=/dev/null -t1 $file_in]
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
exec $bin_rm -f $file_in

#
# Test verbose scancel
#

spawn $scancel --signal=CONT --verbose $job_id1
expect {
	-re "Signal ($number) to job $job_id1" {
		set sig_num $expect_out(1,string)
		if {$sig_num != 9} {
			incr matches
		} else {
			incr matches -1
		}
		exp_continue
	}
	-re "Job is in transistional state, retrying" {
		incr matches -1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel verbose option failed\n"
	set exit_code 1
}

set matches 0
spawn $scancel --verbose $job_id1
expect {
	-re "Terminating job" {
		incr matches
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scancel not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$matches != 1} {
	send_user "\nFAILURE: scancel verbose option failed\n"
	set exit_code 1
}


if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code

