#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Confirm that a job executes with the proper task distribution
#          (--nodes and --distribution options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "1.80"
set exit_code   0

print_header $test_id

#
# Submit a two node job with block distribution
#
set host_0      ""
set host_1      ""
set host_2      ""
set host_3      ""
set timeout $max_job_delay
spawn $srun -N2 -n4 -l --distribution=block -t1 $bin_hostname  
expect {
	-re "More ($alpha) requested than permitted" {
		send_user "\nWARNING: can't test srun task distribution\n"
		exit 0
	}
	-re "(\[0-3\]): ($alpha_numeric)" {
		if { $expect_out(1,string) == 0 } {
			set host_0 $expect_out(2,string)
		}
		if { $expect_out(1,string) == 1 } {
			set host_1 $expect_out(2,string)
		}
		if { $expect_out(1,string) == 2 } {
			set host_2 $expect_out(2,string)
		}
		if { $expect_out(1,string) == 3 } {
			set host_3 $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Verify block distribution of tasks
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 1\n"
	set exit_code   1	
}
set dup_hostname 0
if {[string compare $host_0 $host_1] == 0} {
	set dup_hostname 1	
}
if {[string compare $host_0 $host_2] == 0} {
	set dup_hostname 1	
}
if {[string compare $host_0 $host_3] == 0} {
	set dup_hostname 1	
}
if {$dup_hostname == 1} {
	if {[string compare $host_0 $host_1] != 0} {
		send_user "\nFAILURE: failed to distributed tasks by block\n"
		set exit_code   1	
	}
}
if {[test_front_end] != 0} {
	send_user "\nWARNING: Additional testing is incompatable with front-end systems\n"
	exit $exit_code
}

#
# Submit a two node job with cyclic distribution
#
set host_0      ""
set host_1      ""
set host_2      ""
set host_3      ""
set timeout $max_job_delay
spawn $srun -N2 -n4 -l --distribution=cyclic -t1 $bin_hostname  
expect {
	-re "More ($alpha) requested than permitted" {
		send_user "\nWARNING: can't test srun task distribution\n"
		exit 0
	}
	-re "(\[0-3\]): ($alpha_numeric)" {
		if { $expect_out(1,string) == 0 } {
			set host_0 $expect_out(2,string)
		}
		if { $expect_out(1,string) == 1 } {
			set host_1 $expect_out(2,string)
		}
		if { $expect_out(1,string) == 2 } {
			set host_2 $expect_out(2,string)
		}
		if { $expect_out(1,string) == 3 } {
			set host_3 $expect_out(2,string)
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

#
# Verify cyclic distribution of tasks
#
if {[string compare $host_0 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1	
}
if {[string compare $host_1 ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 1\n"
	set exit_code   1	
}
if {[string compare $host_0 $host_1] == 0} {
	send_user "\nFAILURE: failed to distributed tasks cyclic\n"
	set exit_code   1	
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
