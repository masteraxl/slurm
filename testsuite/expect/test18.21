#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of slaunch's --kill-on-bad-exit option.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "18.21"
set exit_code   0
set file_in     "test$test_id.prog"
set matches     0

print_header $test_id

#
# Delete left-over input script
# Build input script file
#
# We have the last of the tasks exit.  proctrack/linuxproc will not
# signal processes named "slurmstepd" and later user tasks could still
# be named "slurmstepd" when the termination signal comes in.
#
exec $bin_rm -f $file_in
set fd [open "$file_in.c" w]
puts $fd {
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

main()
{
	char *id = getenv("SLURM_PROCID");
	if (atoi(id) == 9) {
		sleep(1); /* helps with proctrack/linuxproc problem */
		exit(2);
	}
	sleep(15);
	printf("SHOULD_NOT_BE_HERE\n");
}
}
close $fd
# Add delay due to sporatic error "Clock skew detected"
exec $bin_sleep 1
exec $bin_make -f /dev/null $file_in
exec $bin_chmod 700 $file_in

#
# Spawn a shell via sattach/slaunch and send exit command to task 1 only
#
set timeout $max_job_delay
set job_id  0
set salloc_pid [spawn $salloc -t1 -N1 $slaunch -n10 --overcommit --kill-on-bad-exit $file_in]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "exit code 2" {
		send_user "This error is expected, no worries\n"
		incr matches
		exp_continue
	}
	-re "SHOULD_NOT_BE_HERE" {
		set matches -10
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		if {$job_id != 0} {
			cancel_job $job_id_1
		}
		slow_kill [expr 0 - $salloc_pid]
		set exit_code 1
	}
	eof {
		wait
	}
}

if {$matches != 1} {
	send_user "\nFAILURE: problem with --kill-on-bad-exit option\n"
	set exit_code 1
}
if {$exit_code == 0} {
	exec $bin_rm -f $file_in $file_in.c
	send_user "\nSUCCESS\n"
}
exit $exit_code
