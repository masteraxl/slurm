#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test the launch of a batch job within an existing job allocation.
#          This logic is used by LSF
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# Note:    This script generates and then deletes files in the working directory 
#          named test1.45.input
############################################################################
# Copyright (C) 2005 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-2002-040.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id      "1.45"
set file_in      "test$test_id.input"
set exit_code    0
set job_id_1     0
set job_id_2     0

print_header $test_id

#
# Delete left-over input script plus stdout/err files
# Build input script file
#
exec $bin_rm -f $file_in none
exec echo "#!$bin_bash"            >$file_in
exec echo "$bin_hostname"         >>$file_in
exec $bin_chmod 700 $file_in

#
# Spawn a srun batch job that uses stdout/err and confirm their contents
#
set timeout $max_job_delay
spawn $srun -N1-4 -A -v
expect {
	-re "jobid ($number):" {
		set job_id_1 $expect_out(1,string)
		send "$srun -b -o none -e none $file_in \n"
		exp_continue
	}
	-re "jobid ($number) submitted" {
		set job_id_2 $expect_out(1,string)
		send "exit \n"
		exp_continue
	}
	-re "jobid ($number).0 submitted" {
		set job_id_2 $expect_out(1,string)
		send "exit \n"
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
		wait
	}
}

if {$job_id_1 == 0} {
	send_user "\nFAILURE: job allocation failure\n"
	exit 1
}
if {$job_id_1 != $job_id_2} {
	send_user "\nFAILURE: batch job did not run in existing allocation\n"
	exit 1
}

if [file exists none] {
	send_user "\nFAILURE: created file 'none', should have mapped to no file\n"
	exit 1
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
	exec $bin_rm -f $file_in
}
exit $exit_code
