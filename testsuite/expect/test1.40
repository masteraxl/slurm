#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of stand-alone srun resource allocation (--uid and --no-shell
#          options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id            "1.40"
set exit_code          0
set job_id             0

print_header $test_id

#
# Submit a slurm allocate job
#
set timeout $max_job_delay
set srun_pid [spawn $srun --allocate -t1 --no-shell]
expect {
	-re "SLURM_JOBID=($number).*" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: job_id not captured\n"
	exit 1
}

#
# The srun should have completed, confirm the job is active
#
set found_job 0
spawn $squeue --states=running --jobs=$job_id
expect {
	-re $job_id {
		set found_job 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: squeue not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
if { $found_job == 0 } {
	send_user "\nFAILURE: job $job_id not in run state\n"
	exit 1
}

#
# Kill the job
#
cancel_job $job_id

#
# Create a job allocation as some other user, namely root
#
set job_id 0
set srun_pid [spawn $srun --allocate -t1 --no-shell --uid=0]
expect {
	-re "SLURM_JOBID=($number).*" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "Invalid user id" {
		set job_id -1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		slow_kill $srun_pid
		set exit_code 1
	}
	eof {
		wait
	}
}
if { $job_id == 0 } {
	send_user "\nFAILURE: job_id not captured\n"
	exit 1
}

if { $job_id == -1 } {
	send_user "\nNo worries, this is expected for non-privileged users\n"
} else {
#
#	The srun should have completed, confirm the job is active
#
	set found_job 0
	spawn $squeue --states=running --jobs=$job_id --user=root
	expect {
		-re $job_id {
			set found_job 1
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: squeue not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	if { $found_job == 0 } {
		send_user "\nFAILURE: job $job_id not in run state\n"
		exit 1
	}
	cancel_job $job_id
}

if { $exit_code == 0 } {
	send_user "\nSUCCESS\n"
}
exit $exit_code
