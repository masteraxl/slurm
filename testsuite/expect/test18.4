#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Confirm that a job executes with the proper task count (--tasks
#          and --overcommit options).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id     "18.4"
set exit_code   0
set job_id      0

print_header $test_id

if { [test_xcpu] } {
	set max_tasks 1
} else {
	set max_tasks 8
}

for {set inx 1} {$inx <= $max_tasks} {set inx [expr $inx * 2]} {
	set tasks_set $inx
	set tasks_get 0
	set timeout $max_job_delay
	set salloc_pid [spawn $salloc -N1-4 -t1 $slaunch -n$tasks_set --overcommit $bin_id]
	expect {
		-re "Granted job allocation ($number)" {
			set job_id $expect_out(1,string)
			exp_continue
		}
		-re "uid=" {
			incr tasks_get
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: salloc not responding\n"
			if {$job_id != 0} {
				cancel_job $job_id
			}
			slow_kill [expr 0 - $salloc_pid]
			set exit_code 1
		}
		eof {
			if {$tasks_get < $tasks_set} {
				send_user "\nFAILURE: Did not get proper number of tasks: "
				send_user "$tasks_get < $tasks_set\n"
				set exit_code 1
			} else {
				send_user "test of $tasks_get tasks good\n\n"
			}			
			wait
		}
	}
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
