#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of salloc and slaunch exit code reporting
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id        "18.17"
set exit_code      0
set exit_script    "./test$test_id.exit.bash"
set test_script    "./test$test_id.bash"
print_header $test_id

set timeout $max_job_delay

#
# Delete left-over scripts and build new ones
#
make_bash_script $exit_script {exit $((SLURM_PROCID + 10))}

#
# Check the return code of slaunch.  To do so, we spawn
# salloc and slaunch command seperately.
#
set job_id  0
set matches 0

# First start salloc and wait for the allocation
set salloc_pid [spawn $salloc -N1 -t1 --kill-command sleep 300]
set salloc_spawn_id $spawn_id
set spawn_id $salloc_spawn_id
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
	}
	timeout {
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		send_user "\nFAILURE: salloc not responding\n"
		exit 1
	}
}

# Then spawn slaunch using the job allocation from the previous salloc
set slaunch_pid [spawn $slaunch --jobid=$job_id -n2 --overcommit $exit_script]
set slaunch_spawn_id $spawn_id
set spawn_id $slaunch_spawn_id
set sum 0
expect {
	-re "exit code ($number)" {
		send_user "This error is expected, no worries\n"
		incr sum $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: slaunch not responding\n"
		slow_kill $slaunch_pid
		set exit_code 1
		exp_continue
	}
	eof {
		set slaunch_rc [lindex [wait] 3]
	}
}
if {$sum != 21} {
	send_user "\nFAILURE: slaunch failed to report individual task error codes\n"
	set exit_code 1
}
send_user "slaunch rc = $slaunch_rc\n"
if {$slaunch_rc != 11} {
	send_user "\nFAILURE: slaunch's return code was not the maximum task return code\n"
	set exit_code 1
}

# signal the entire process group of salloc to kill the "sleep 300"
exec $bin_kill -s INT "-$salloc_pid"
set salloc_rc [lindex [wait -i $salloc_spawn_id] 3]
# We don't care about salloc's return code (it is probably 1 because
# we are killing the sleep command with SIGINT.
#send_user "salloc rc = $salloc_rc\n"

#
# Post-processing
#
if {$exit_code == 0} {
	exec $bin_rm -f $exit_script $test_script
	send_user "\nSUCCESS\n"
}
exit $exit_code
