#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of shared and contiguous options (--shared and --contiguous).
#          Also uses --batch and --hold options.  Also see test1.53.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id              "1.14"
set exit_code            0
set job_id               0
set matches              0

print_header $test_id

#
# Spawn a srun batch job with shared option only
#
spawn $srun --share --hold --batch -t1 $bin_pwd
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		set exit_code 1
		exp_continue
	}
	eof {
	}
}

#
# Confirm shared and contiguous flag values
#
if {$job_id != 0} {
	spawn $scontrol show job $job_id
	expect {
		-re "Shared=($number)" {
			set shared_val $expect_out(1,string)
			if {$shared_val == 1} {
				incr matches
			}
			exp_continue
		}
		-re "Contiguous=($number)" {
			set cont_val $expect_out(1,string)
			if {$cont_val == 0} {
				incr matches
			}
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			cancel_job $job_id
			set exit_code   1
		}
		eof {
		}
	}
	cancel_job $job_id
	set job_id 0
} else {
	set exit_code   1
}

#
# Spawn a srun batch job with contiguous option only
#
spawn $srun --contiguous --hold --batch -t1 $bin_pwd
expect {
	-re "jobid ($number) submitted" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		exit 1
	}
	eof {
	}
}

#
# Confirm shared and contiguous flag values
#
if {$job_id != 0} {
	spawn $scontrol show job $job_id
	expect {
		-re "Shared=($number)" {
			set shared_val $expect_out(1,string)
			if {$shared_val == 0} {
				incr matches
			}
			exp_continue
		}
		-re "Contiguous=($number)" {
			set cont_val $expect_out(1,string)
			if {$cont_val == 1} {
				incr matches
			}
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			cancel_job $job_id
			set exit_code 1
		}
		eof {
		}
	}
	cancel_job $job_id
} else {
	set exit_code 1
}

if {$matches != 4} {
	send_user "\nFAILURE: Did not properly set shared and contiguous flags\n"
	set exit_code 1
}
if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
