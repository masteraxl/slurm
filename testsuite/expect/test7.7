#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of sched/wiki2 plugin. This is intended to execute in the
#          place of Moab or Maui and emulate its actions to confirm proper
#          operation of the plugin.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-226842.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "7.7"
set exit_code   0
set file_in     "test$test_id.in"
set file_out    "test$test_id.out"
set test_prog   "test$test_id.prog"

print_header $test_id

#
# Check if we have sched/wiki2 configured
#
log_user 0
set conf_dir     ""
set control_addr ""
set sched_port   0
set sched_wiki   0
exec $bin_rm -f $file_in $file_out $test_prog
spawn $scontrol show config
expect {
	-re "ControlAddr *= ($alpha_numeric)" {
		set control_addr $expect_out(1,string)
		exp_continue
	}
	-re "SchedulerPort *= ($number)" {
		set sched_port $expect_out(1,string)
		exp_continue
	}
	-re "SchedulerType *= sched/wiki2" {
		set sched_wiki 1
		exp_continue
	}
	-re "SLURM_CONFIG_FILE *= (.*)/slurm.conf" {
		set conf_dir $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		set exit_code 1
	}
	eof {
		wait
	}
}
log_user 1
if {$sched_wiki == 0} {
	send_user "\nWARNING: not running sched/wiki2, test is not applicable\n"
	exit $exit_code
}
if {[string compare $control_addr ""] == 0} {
	send_user "\nFAILURE: ControlAddr not set\n"
	exit 1
}
if {$sched_port == 0} {
	send_user "\nFAILURE: SchedulerPort = 0\n"
	exit 1
}

#
# Try to get the AuthKey from wiki.conf
#
set auth_key  0
set e_port    0
set agg_time  999
set wiki_file "$conf_dir/wiki.conf"
if {[file readable $wiki_file] == 0}  {
	send_user "\nWARNING: Unable to read $wiki_file\n"
	exit $exit_code
}
log_user 0
spawn $bin_sort $wiki_file
expect {
	-re "AuthKey=($number)" {
		set auth_key $expect_out(1,string)
		exp_continue
	}
	-re "EPort=($number)" {
		set e_port $expect_out(1,string)
		exp_continue
	}
	-re "JobAggregationTime=($number)" {
		set agg_time $expect_out(1,string)
		exp_continue
	}
	-re
	eof {
		wait
	}
}
log_user 1
if {$auth_key == 0} {
	send_user "\nWARNING: AuthKey not found in $wiki_file\n"
	exit 1
}
if {$e_port == 0} {
	send_user "\nWARNING: EPort not found in $wiki_file\n"
	exit 1
}
if {$agg_time != 0} {
	send_user "\nWARNING: JobAggregationTime != 0 in $wiki_file\n"
	exit 1
}
#send_user "\nAuthKey=$auth_key\nEPort=$e_port\n"

#
# Submit a job to work with
#
exec $bin_rm -f $file_out
make_bash_script $file_in "
  echo BEGIN
  $bin_sleep 20
  echo FINI
  exit 123"
set job_id1 0
set job_id2 0
set srun_pid [spawn $srun -N1-6 --output=$file_out --comment=test --batch -t1 $file_in]
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		catch {exec $bin_kill -KILL $srun_pid}
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: srun job submit failed\n"
	exit 1
}

#
# Start our Moab emulator ($test_prog) to manage the job
#
exec $bin_rm -f $test_prog
exec $bin_make -f /dev/null $test_prog
set success 0
set moab_pid [spawn $test_prog $auth_key $control_addr $e_port $job_id1 $sched_port]
set master_id $spawn_id
expect {
	-re "READY" {
	}
	timeout {
		send_user "\nFAILURE: Moab emulator not responding\n"
		catch {exec $bin_kill -KILL $moab_pid}
		cancel_job $job_id1
		exit 1
	}
	eof {
		send_user "\nFAILURE: Test program terminated early\n"
		cancel_job $job_id1
		exit 1
	}
}

set srun_pid [spawn $srun --output=/dev/null --batch -t1 $file_in]
expect {
	-re "jobid ($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		catch {exec $bin_kill -KILL $srun_pid}
		set exit_code 1
	}
	eof {
		wait
	}
}

set spawn_id $master_id
expect {
	-i $master_id
	-re "SUCCESS" {
		set success 1
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: Moab emulator not responding\n"
		catch {exec $bin_kill -KILL $moab_pid}
		set exit_code 1
	}
	eof {
		wait
	}
}
if {$success == 0} {
	send_user "\nFAILURE: Moab emulator failed\n"
	set exit_code 1
}

if {[wait_for_job $job_id1 "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job to complete\n"
	set exit_code 1
}
if {[wait_for_file $file_out] == 0} {
	set matches 0
	spawn $bin_cat $file_out
	expect {
		-re "BEGIN" {
			incr matches
			exp_continue
		}
		-re "FINI" {
			incr matches
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$matches != 2} {
		send_user "\nFAILURE: Job output not correct\n"
		set exit_code 1
	}
} else {
	send_user "\nFAILURE: Job output missing\n"
	set exit_code 1
}

cancel_job $job_id1
if {$job_id2 != 0} {
	cancel_job $job_id2
}
if { $exit_code == 0 } {
	exec $bin_rm -f $file_in $file_out $test_prog
	send_user "\nSUCCESS\n"
}
exit $exit_code

