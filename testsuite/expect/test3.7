#!/usr/bin/expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of job suspend/resume.
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2005 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# UCRL-CODE-217948.
# 
# This file is part of SLURM, a resource management program.
# For details, see <http://www.llnl.gov/linux/slurm/>.
#  
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
# 
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
############################################################################
source ./globals

set test_id        "3.7"
set exit_code      0
set file_out1      "test$test_id.output.1"
set file_out2      "test$test_id.output.2"
set file_prog      "test$test_id.prog"
set file_prog_sh1  "test$test_id.prog.sh1"
set file_prog_sh2  "test$test_id.prog.sh2"
set job_id1        0
set job_id2        0
set host_name      ""
set not_supported  0

print_header $test_id

proc suspend_job { job_id operation } {
	global exit_code scontrol not_supported

	spawn $scontrol $operation $job_id
	expect {
		-re "Requested operation not supported" {
			send_user "\nWARNING: job suspend not supported\n"
			set not_supported 1
			exp_continue
		}
		-re "error" {
			send_user "\nFAILURE: scontrol error\n"
			set exit_code 1
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: scontrol not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
}

proc check_output { file_name } {
	global exit_code bin_cat
	set match1 0
	set match2 0

	spawn $bin_cat $file_name
	expect {
		-re "JobSuspended" {
			set match1 1
			exp_continue
		}
		-re "AllDone" {
			set match2 1
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: cat not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}

	if { $match1 == 0 } {
		send_user "\nFAILURE: job never suspended\n"
		set exit_code 1
	}
	if { $match2 == 0 } {
		send_user "\nFAILURE: job failed to run to completioni\n"
		set exit_code 1
	}
}

#
# Delete left-over program and rebuild it
#
exec $bin_rm -f $file_prog $file_prog_sh1 $file_prog_sh2 $file_out1 $file_out2
exec echo "#!/bin/sh"           > $file_prog_sh1
exec echo "$srun ./$file_prog" >> $file_prog_sh1
exec echo "#!/bin/sh"           > $file_prog_sh2
exec echo "./$file_prog"       >> $file_prog_sh2
exec $bin_make -f /dev/null $file_prog
exec $bin_chmod 700 $file_prog $file_prog_sh1 $file_prog_sh2

#
# Submit two jobs to the same node
#
spawn $srun --batch -N1 -t1 --output=$file_out1 $file_prog_sh1
expect {
	-re "jobid ($number) submitted" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: srun failed to report jobid\n"
	kill_srun
	exit 1
}
# Get the job's allocate host name
if {[wait_for_job $job_id1 RUNNING] != 0} {
	send_user "\nFAILURE: waiting for job $job_id1 to run\n"
	exit 1
}
spawn $scontrol show job $job_id1
expect {
	-re " NodeList=($alpha_numeric_under)" {
		set host_name $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		kill_srun
		exit 1
	}
	eof {
		wait
	}
}
if {[string compare $host_name ""] == 0} {
	send_user "\nFAILURE: did not get hostname for job $job_id1\n"
	kill_srun
	exit 1
}
# Submit another job to that same node
spawn $srun --batch -N1 -t1 --output=$file_out2 $file_prog_sh2
expect {
	-re "jobid ($number) submitted" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: srun not responding\n"
		kill_srun
		exit 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: srun failed to report jobid\n"
	exec $scancel $job_id1
	exit 1
}

#
# Stop job 1 and let job 2 begin,
# Stop job 2 and let job 1 complete, 
# Then resume job 2
# The sleep commands are added so the program can recognize 
# that it has been suspended.
#
exec $bin_sleep 5
suspend_job $job_id1 suspend
if {$not_supported == 0} {
	if {[wait_for_job $job_id2 RUNNING] != 0} {
		send_user "\nFAILURE: waiting for job $job_id2 to run\n"
		kill_srun
		exit 1
	}
	exec $bin_sleep 5
	suspend_job $job_id2 suspend
	suspend_job $job_id1 resume
	if {[wait_for_job $job_id1 DONE] != 0} {
		send_user "\nFAILURE: waiting for job $job_id1 to complete\n"
		exec $scancel $job_id1
		exec $scancel $job_id2
		exit 1
	}
	suspend_job $job_id2 resume
}
if {[wait_for_job $job_id2 DONE] != 0} {
        send_user "\nFAILURE: waiting for job $job_id1 to complete\n"
        exec $scancel $job_id1
	exec $scancel $job_id2
        exit 1
}
if {$not_supported == 0} {
	wait_for_file $file_out1
	check_output $file_out1
	wait_for_file $file_out2
	check_output $file_out2
}

if {$exit_code == 0} {
	exec $bin_rm -f $file_out1 $file_out2 $file_prog $file_prog_sh1 $file_prog_sh2
	send_user "\nSUCCESS\n"
}
exit $exit_code
